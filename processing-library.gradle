// This script adds processing library build support to gradle.
def releaseRoot = "$rootDir/release"

def releaseName = "$projectName-$version"
def releaseDirectory = "$releaseRoot/$releaseName"

task releaseProcessingLib {
    dependsOn {
        clean
        build
        javadoc
        jar
    }

    finalizedBy 'packageRelease', 'renameRelease'

    doFirst {
        println "releasing library $projectName..."

        // printing current jvm
        def currentJvm = org.gradle.internal.jvm.Jvm.current()
        println currentJvm

        // if (project.hasProperty("cuda")) {
        //     println "CUDA support enabled!"
        // }

        println("cleaning release...")
        project.delete(files(
                "$releaseDirectory",
                "$releaseRoot/${releaseName}.zip",
                "$releaseRoot/${releaseName}.txt"
        ))
    }

    doLast {
        println "creating package..."

        println "copy library..."
        project.copy {
            from "$buildDir/libs/${projectName}.jar"
            into "$releaseDirectory/library"
        }

        println "copy dependencies..."
        project.copy {
            from configurations.runtimeClasspath
            into "$releaseDirectory/library"
        }

        // Need to delete the Processing jar explicitly, at least when including them as fileTree dependencies
        delete "$releaseDirectory/library/core.jar"
        delete "$releaseDirectory/library/jogl-all-main.jar"
        delete "$releaseDirectory/library/gluegen-rt-main.jar"            

        println "copy libraries..."
        project.copy {
            from("$releaseDirectory/library") {
                include "*.jar"
            }
            into "libs"
            exclude "${projectName}.jar"
        }

        println "copy assets (only if necessary)..."
        project.copy {
            from("$rootDir") {
                include "shaders/**",
                        "native/**"
            }
            into "$releaseDirectory/library"
            exclude "*.DS_Store"
        }

        println "copy javadoc..."
        project.copy {
            from "$buildDir/docs/javadoc"
            into "$releaseDirectory/reference"
        }

        println "copy additional files..."
        project.copy {
            from("$rootDir") {
                include "README.md",
                        "readme/**",
                        "examples/**",
                        "src/**"
            }
            into "$releaseDirectory"
            exclude "*.DS_Store", "**/networks/**"
        }

        println "copy repository library.txt..."
        copyProperties("$releaseRoot", "${projectName}.txt")

        println "copy repository library.properties..."
        copyProperties("$releaseDirectory", "library.properties")

        if (project.hasProperty("sketchbookLocation")) {
            println "copy to sketchbook..."
            def sketchbookAbsolutePath = sketchbookLocation.replace("\${user.home}", System.properties['user.home'])
            def installDirectory = "$sketchbookAbsolutePath/libraries/$projectName"
            project.copy {
                from("$releaseDirectory") {
                    include "library.properties",
                            "examples/**",
                            "library/**",
                            "reference/**",
                            "src/**"
                }
                into "$installDirectory"
            }
        }
    }

    ext.copyProperties = { destDirectory, destFilename ->
        project.copy {
            from "$rootDir/library.properties"
            into "$destDirectory"
            rename "library.properties", "$destFilename"

            filter { String line -> line.replaceAll("name=", "name=$propertiesName") }
            filter { String line -> line.replaceAll("category=", "category=$propertiesCategory") }
            filter { String line -> line.replaceAll("authors=", "authors=$propertiesAuthors") }
            filter { String line -> line.replaceAll("url=", "url=$propertiesUrl") }
            filter { String line -> line.replaceAll("sentence=", "sentence=$propertiesSentence") }
            filter { String line -> line.replaceAll("paragraph=", "paragraph=$propertiesParagraph") }
            filter { String line -> line.replaceAll("version=", "version=$propertiesVersion") }
            filter { String line -> line.replaceAll("prettyVersion=", "prettyVersion=$propertiesPrettyVersion") }
            filter { String line -> line.replaceAll("minRevision=", "minRevision=$propertiesMinRevision") }
            filter { String line -> line.replaceAll("maxRevision=", "maxRevision=$propertiesMaxRevision") }
        }
    }
}

task packageRelease(type: Zip) {
    mustRunAfter releaseProcessingLib

    archiveFileName = "${projectName}.zip"
    from "$releaseDirectory"
    into "$projectName"
    destinationDirectory = file("$releaseRoot")
    exclude "**/*.DS_Store"
}

task renameRelease {
    mustRunAfter packageRelease
}