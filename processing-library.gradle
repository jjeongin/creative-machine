// This script adds processing library build support to gradle.
def releaseRoot = "$rootDir/release"

def releaseName = "$outputName$outputNamePostfix-$version"
def releaseDirectory = "$releaseRoot/$releaseName"

task releaseProcessingLib {
    dependsOn {
        clean
        build
        javadoc
        if (project.hasProperty("disable-fatjar")) {
            jar
        } else {
            fatJar
        }
    }

    finalizedBy 'packageRelease', 'renameRelease'

    doFirst {
        println "releasing library $outputName..."

        // printing current jvm
        def currentJvm = org.gradle.internal.jvm.Jvm.current()
        println currentJvm

        if (project.hasProperty("cuda")) {
            println "CUDA support enabled!"
        }

        println("cleaning release...")
        project.delete(files(
                "$releaseDirectory",
                "$releaseRoot/${releaseName}.zip",
                "$releaseRoot/${releaseName}.txt"
        ))
    }

    doLast {
        println "creating package..."

        if (project.hasProperty("disable-fatjar")) {
            println "copy library..."
            project.copy {
                from "$buildDir/libs/${outputName}.jar"
                into "$releaseDirectory/library"
            }

            println "copy dependencies..."
            project.copy {
                from configurations.runtimeClasspath
                into "$releaseDirectory/library"
            }

            // Need to delete the Processing jar explicitly, at least when including them as fileTree dependencies
            delete "$releaseDirectory/library/core.jar"
            delete "$releaseDirectory/library/jogl-all-main.jar"
            delete "$releaseDirectory/library/gluegen-rt-main.jar"            
        } else {
            println "copy fatjar library..."
            project.copy {
                from "$buildDir/libs/$outputName-complete.jar"
                into "$releaseDirectory/library"
                rename "$outputName-complete.jar", "${outputName}.jar"
            }
        }

        println "copy libraries..."
        project.copy {
            from("$releaseDirectory/library") {
                include "*.jar"
            }
            into "djl-libs"
            exclude "${outputName}.jar"
        }

        println "copy assets (only if necessary)..."
        project.copy {
            from("$rootDir") {
                include "shaders/**",
                        "native/**"
            }
            into "$releaseDirectory/library"
            exclude "*.DS_Store"
        }

        println "copy javadoc..."
        project.copy {
            from "$buildDir/docs/javadoc"
            into "$releaseDirectory/reference"
        }

        println "copy additional files..."
        project.copy {
            from("$rootDir") {
                include "README.md",
                        "library.properties",
                        "readme/**",
                        "examples/**",
                        "src/**"
            }
            into "$releaseDirectory"
            exclude "*.DS_Store", "**/networks/**"
        }

        println "copy repository library.txt..."
        project.copy {
            from "$rootDir/library.properties"
            into "$releaseRoot"
            rename "library.properties", "${outputName}.txt"
            filter {
                String line -> line.replaceAll("prettyVersion=", "prettyVersion=$versionString")
            }
            filter {
                String line -> line.replaceAll("version=", "version=$versionNumber")
            }            
        }

        if (project.hasProperty("sketchbookDirectory")) {
            println "copying to sketchbook..."

            def installDirectory = "$sketchbookDirectory/libraries/$outputName"
            project.copy {
                from("$releaseDirectory") {
                    include "library.properties",
                            "examples/**",
                            "library/**",
                            "reference/**",
                            "src/**"
                }
                into "$installDirectory"
            }
        }
    }
}

// task copyProperties(type: Copy) {
// }

task packageRelease(type: Zip) {
    mustRunAfter releaseProcessingLib

    archiveFileName = "${outputName}${outputNamePostfix}.zip"
    from "$releaseDirectory"
    into "$outputName"
    destinationDirectory = file("$releaseRoot")
    exclude "**/*.DS_Store"
}

task renameRelease {
    mustRunAfter packageRelease
}